--- /var/dev/wayland_lvgl/build/tmp/work/uboot-2022.04-r0/git/boot/bootm.c	2024-03-02 13:32:12.850622250 +0100
+++ ./boot/bootm.c	2024-03-02 10:09:56.890887329 +0100
@@ -251,6 +251,13 @@
 {
 	int ret;
 
+/* heig-vd */
+#ifdef CONFIG_BCM2711
+		int emmcbus_offset;
+		const struct fdt_property *emmcbus_prop_src;
+		int proplen;
+#endif /* CONFIG_BCM2711 */
+
 	/* find ramdisk */
 	ret = boot_get_ramdisk(argc, argv, &images, IH_INITRD_ARCH,
 			       &images.rd_start, &images.rd_end);
@@ -291,6 +298,41 @@
 		return 1;
 	}
 
+/* heig-vd */
+#ifdef CONFIG_BCM2711
+		/*
+		 * With Raspberry Pi 4, the firmware will patch the device tree got from
+		 * the boot partition (bcm2711.dtb) to adapt the dma address ranges of the
+		 * emmc2 device. It appeared with the 8 GB version where the bus address
+		 * can be more than 1 GB.
+		 *
+		 * Since we are using a static DT, we perform the patch now once we got the
+		 * DT stored in the ITB file.
+		 */
+
+		/* Find the node related to emmc2bus in order to path it with the patched DT from RPi4 FW */
+		emmcbus_offset = fdt_path_offset(gd->fdt_blob, "/emmc2bus");
+		if (emmcbus_offset < 0) {
+			printf("WARNING: Can't find emmc2bus in the got patched FT (RPi 4)\n");
+			goto out;
+		}
+
+		emmcbus_prop_src = fdt_get_property(gd->fdt_blob, emmcbus_offset, "dma-ranges", &proplen);
+		if (!emmcbus_prop_src) {
+			printf("WARNING: Can't find the dma-ranges property in the emmc2bus node.\n");
+			goto out;
+		}
+
+		emmcbus_offset = fdt_path_offset(images.ft_addr, "/emmc2bus");
+		if (emmcbus_offset < 0) {
+			printf("WARNING: Can't find emmc2bus in the DT stored in the ITB\n");
+			goto out;
+		}
+
+		fdt_setprop(images.ft_addr, emmcbus_offset, "dma-ranges", emmcbus_prop_src->data, proplen);
+	out:
+#endif /* CONFIG_BCM2711 */
+
 	if (CONFIG_IS_ENABLED(CMD_FDT))
 		set_working_fdt_addr(map_to_sysmem(images.ft_addr));
 #endif

--- /home/rossierd/soo/infrabase/build/tmp/work/usr-linux-1.0-r0/usr-linux-1.0/src/graphic/fb_benchmark/fb.c	1970-01-01 01:00:00.000000000 +0100
+++ ./src/graphic/fb_benchmark/fb.c	2025-09-03 16:56:16.389734217 +0200
@@ -0,0 +1,127 @@
+/*******************************************************************
+ *
+ * fb.c - FBDEV compatibility code, draws the same animation
+ * as with DRM. currently it's glitchy on Intel.
+ *
+ * Copyright (c) 2025 EDGEMTech Ltd.
+ *
+ * Author: EDGEMTech Ltd, Erik Tagirov (erik.tagirov@edgemtech.ch)
+ *
+ ******************************************************************/
+#include <stdlib.h>
+#include <stddef.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <string.h>
+#include <fcntl.h>
+#include <sys/mman.h>
+#include <sys/ioctl.h>
+#include <linux/fb.h>
+
+#include "common.h"
+#include "drm-common.h"
+#include "draw.h"
+
+/* options related to fbdev, defined in main.c */
+extern bool fbdev_wait_vsync;
+extern bool fbdev_force_refresh;
+
+/* Uses the same structure as DRM code to represent a framebuffer */
+static struct drm_fb fb;
+static struct fb_var_screeninfo var_info = {0};
+static int fb_dev_fd;
+
+int init_fbdev(const char *device_name)
+{
+	uint32_t stride;
+	struct fb_fix_screeninfo fixed_info;
+
+	fb_dev_fd = open(device_name, O_RDWR);
+
+	memset(&fixed_info, 0x0, sizeof(struct fb_fix_screeninfo));
+
+	if (fb_dev_fd == -1) {
+		perror("Error: cannot open framebuffer device");
+		return -1;
+	}
+
+	/* wake up display */
+	if (ioctl(fb_dev_fd, FBIOBLANK, FB_BLANK_UNBLANK) != 0) {
+		perror("FBIOBLANK");
+		/* don't return Some devices don't implement FBIOBLANK */
+	}
+
+
+	if (ioctl(fb_dev_fd, FBIOGET_FSCREENINFO, &fixed_info) == -1) {
+		perror("Error reading fixed information");
+		return -1;
+	}
+
+	if (ioctl(fb_dev_fd, FBIOGET_VSCREENINFO, &var_info) == -1) {
+		perror("Error reading variable information");
+		return -1;
+	}
+
+	fb.width = var_info.xres;
+	fb.height = var_info.yres;
+	fb.stride = fixed_info.line_length;
+	fb.buf = mmap(0, fixed_info.smem_len, PROT_READ | PROT_WRITE, MAP_SHARED, fb_dev_fd, 0);
+
+	if (fb.buf == MAP_FAILED) {
+		perror("Failed to map framebuffer");
+		return -1;
+	}
+
+	printf("fbdev driver: %s\n", fixed_info.id);
+	printf("resolution w:%d h:%d depth:%dbpp\n", var_info.xres, var_info.yres, var_info.bits_per_pixel);
+
+	return 0;
+}
+
+int run_fb(uint32_t frame_count)
+{
+
+	int64_t report_time, cur_time;
+	uint32_t frame_cnt;
+	uint32_t p_frame_cnt;
+	int dummy_arg;
+
+	frame_cnt = p_frame_cnt = 0;
+	report_time = get_time_ns();
+
+	for (int i = 0; i < frame_count; i++) {
+
+		draw_solid_color(&fb);
+
+		if (fbdev_force_refresh == true) {
+
+			var_info.activate |= FB_ACTIVATE_NOW | FB_ACTIVATE_FORCE;
+			if (ioctl(fb_dev_fd, FBIOPUT_VSCREENINFO, &var_info) == -1) {
+				perror("Error setting var screen info");
+				return EXIT_FAILURE;
+			}
+		}
+
+		if (fbdev_wait_vsync == true) {
+			if (ioctl(fb_dev_fd, FBIO_WAITFORVSYNC, &dummy_arg) == -1) {
+				perror("Error waiting for VSYNC");
+				return EXIT_FAILURE;
+			}
+		}
+
+		cur_time = get_time_ns();
+		if (cur_time > (report_time + 1 * NSEC_PER_SEC)) {
+
+			double elapsed_time = cur_time - report_time;
+			double secs = elapsed_time / (double)NSEC_PER_SEC;
+			uint32_t delta_frames = frame_cnt - p_frame_cnt;
+
+			printf("Rendered %u frames in %f sec (%f fps)\n",
+					delta_frames, secs, (double) delta_frames / secs);
+			report_time = cur_time;
+			p_frame_cnt = frame_cnt;
+		}
+
+		frame_cnt++;
+	}
+}

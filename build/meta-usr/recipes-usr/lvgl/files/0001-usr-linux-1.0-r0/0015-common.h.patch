--- /home/rossierd/soo/infrabase/build/tmp/work/usr-linux-1.0-r0/usr-linux-1.0/src/graphic/fb_benchmark/common.h	1970-01-01 01:00:00.000000000 +0100
+++ ./src/graphic/fb_benchmark/common.h	2025-08-28 13:15:04.926425234 +0200
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2017 Rob Clark <rclark@redhat.com>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sub license,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial portions
+ * of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef _COMMON_H
+#define _COMMON_H
+
+#include <gbm.h>
+#include <drm_fourcc.h>
+#include <stdbool.h>
+
+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
+
+/* from mesa's util/macros.h: */
+#define MIN2( A, B )   ( (A)<(B) ? (A) : (B) )
+#define MAX2( A, B )   ( (A)>(B) ? (A) : (B) )
+#define MIN3( A, B, C ) ((A) < (B) ? MIN2(A, C) : MIN2(B, C))
+#define MAX3( A, B, C ) ((A) > (B) ? MAX2(A, C) : MAX2(B, C))
+
+	static inline unsigned
+u_minify(unsigned value, unsigned levels)
+{
+	return MAX2(1, value >> levels);
+}
+
+#ifndef DRM_FORMAT_MOD_LINEAR
+#define DRM_FORMAT_MOD_LINEAR 0
+#endif
+
+#ifndef DRM_FORMAT_MOD_INVALID
+#define DRM_FORMAT_MOD_INVALID ((((__u64)0) << 56) | ((1ULL << 56) - 1))
+#endif
+
+#define NUM_BUFFERS 2
+
+struct gbm {
+	struct gbm_device *dev;
+	struct gbm_surface *surface;
+	struct gbm_bo *bos[NUM_BUFFERS];    /* for the surfaceless case */
+	uint32_t format;
+	int width, height;
+};
+
+struct dumb_buf {
+	struct drm_fb *buffers[NUM_BUFFERS];
+	uint32_t format;
+	int width, height;
+	int drm_fd;
+};
+
+const struct gbm * init_gbm(int drm_fd, int w, int h, uint32_t format, uint64_t modifier, bool surfaceless);
+
+struct dumb_buf * init_dumb_buffers(int drm_fd, int w, int h, uint32_t format);
+
+#define NSEC_PER_SEC (INT64_C(1000) * USEC_PER_SEC)
+#define USEC_PER_SEC (INT64_C(1000) * MSEC_PER_SEC)
+#define MSEC_PER_SEC INT64_C(1000)
+
+int64_t get_time_ns(void);
+
+#endif /* _COMMON_H */
